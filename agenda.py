# TODO Clases Contacto y Grupos# importar base de datosclass Contacto:    def __init__(self, nombre, numero):        self.nombre = nombre        self.numero = numero    def set_contacto(self, nombre, numero):        self.nombre = nombre        self.numero = numero    def set_name(self, nombre):        self.nombre = nombre    def set_numero(self, numero):        self.numero = numero    def get_nombre(self):        return self.nombre    def get_numero(self):        return self.numero    def __str__(self):        return self.nombre + " " + self.numeroclass Grupo:    def __init__(self, contacto_ori, contacto_miem, relacion):        self.contacto_ori = contacto_ori        self.contacto_miem = contacto_miem        self.relacion = relacion    def set_contacto_ori(self, contacto):        self.contacto_ori = contacto    def set_contacto_miem(self, contacto):        self.contacto_miem = contacto    def set_relacion(self, relacion):        self.relacion = relacion    def get_contacto_ori(self):        return self.contacto_ori    def get_contacto_miem(self):        return self.contacto_miem    def relacion(self):        return self.relacion    def __str__(self):        return self.contacto_ori + " " + self.contacto_miem + " " + self.relacionclass Agenda:    """Class of agenda save contacts and groups    """    def __init__(self, contactos=None, grupos=None):        """Init of the class Agenda, the constructor begin with two empty lists        Keyword Arguments:            contactos {Contacto} -- [description] (default: {None})            grupos {Grupo} -- [description] (default: {None})        """        self.contactos = list()  # list of contacts objects        self.grupos = list()  # list of group objects    def set_contactos(self, contactos: list):        self.contactos = contactos    def set_grupos(self, grupos: list):        self.grupos = grupos    def get_contactos(self):        return self.contactos    def get_contacto_from_str(self, param):        """        receives a name string and returns the contact for that string        Returns {Contacto}:        """        for contacto in self.contactos:            if param == contacto.nombre:                return contacto    def get_grupos(self):        return self.grupos    def load_agenda(self, contactos, grupos):        """Load dates to Agenda        Args:            contactos {list}: list of tuples that will be convert to contacts            grupos {list}: list that will be convert to goup        """        for contacto in contactos:            self.contactos.append(Contacto(contacto[0], contacto[1]))        for grupo in grupos:            self.grupos.append(Grupo(grupo[0], grupo[1], grupo[2]))    def get_contacto_numero_grupo(self, contacto: Contacto):        """        receives a contact and returns his name, number and group        Args:            contacto {Contacto}: type Contacto        Returns {tuple} : tuple of name, number and group        """        for grupo in self.grupos:            if contacto.nombre == grupo.contacto_ori or contacto.nombre == grupo.contacto_miem:                return contacto.nombre, contacto.numero, grupo.relacion    def add_contacto(self, contacto: Contacto):        self.contactos.append(contacto)    def add_grupo(self, grupo: Grupo):        self.grupos.append(grupo)    def remove_contacto(self, param: str):        """#TODO Hacer doc remove_contacto"""        for contacto in self.contactos:            if contacto.nombre == param or contacto.numero == param:                self.contactos.remove(contacto)    def __str__(self):        res = "Contactos:\n"        for contacto in self.contactos:            res += str(contacto) + "\n"        res += "Grupos" + "\n"        for grupo in self.grupos:            res += str(grupo) + "\n"        return res